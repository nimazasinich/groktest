name: Build Electron App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'  # استفاده از Node.js 18 برای سازگاری بهتر
  ARTIFACT_NAME: 'speech-to-text-app'
  OUTPUT_FILE: 'SpeechToTextApp.exe'

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
      # مرحله 1: دریافت کد از مخزن
      - name: Checkout code
        uses: actions/checkout@v4

      # مرحله 2: کش کردن ماژول‌های Node.js
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      # مرحله 3: کش کردن باینری‌های Electron و NSIS
      - name: Cache Electron and NSIS binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ env.NODE_VERSION }}-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-${{ env.NODE_VERSION }}-

      # مرحله 4: تنظیم Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # مرحله 5: به‌روزرسانی package-lock.json
      - name: Update package-lock.json
        shell: bash
        run: |
          echo "Updating package-lock.json to match package.json..."
          npm install
          echo "package-lock.json updated."

      # مرحله 6: نصب وابستگی‌ها
      - name: Install dependencies
        shell: bash
        run: npm ci
        timeout-minutes: 8

      # مرحله 7: ساخت پروژه
      - name: Build project
        shell: bash
        run: npm run build
        env:
          NODE_ENV: production
        timeout-minutes: 5

      # مرحله 8: بررسی خروجی ساخت
      - name: Verify build output
        shell: cmd
        run: |
          echo "Listing contents of dist directory after build:"
          dir dist
          if not exist "dist\*.js" (
            echo "Error: No JavaScript files found in dist! Build failed."
            exit 1
          )

      # مرحله 9: ساخت فایل اجرایی
      - name: Create executable
        shell: cmd
        run: |
          echo "Running electron-builder..."
          npm run make:portable -- --no-sign
          echo "Listing contents of dist directory after make:"
          dir dist
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          DEBUG: electron-builder*
        timeout-minutes: 10

      # مرحله 10: بررسی آرتیفکت
      - name: Verify artifact
        shell: cmd
        run: |
          echo "Listing contents of dist directory:"
          dir dist
          if not exist "dist\${{ env.OUTPUT_FILE }}" (
            echo "Error: dist\${{ env.OUTPUT_FILE }} does not exist!"
            exit 1
          )

      # مرحله 11: آپلود آرتیفکت
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-windows
          path: dist/${{ env.OUTPUT_FILE }}
          if-no-files-found: error
          retention-days: 5
